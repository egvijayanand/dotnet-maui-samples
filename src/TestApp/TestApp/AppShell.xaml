<?xml version="1.0" encoding="UTF-8" ?>
<Shell
    x:Class="TestApp.AppShell"
    xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    xmlns:fas="clr-namespace:FontAwesome.Solid;assembly=VijayAnand.FontAwesome"
    xmlns:local="clr-namespace:TestApp"
    FlyoutBackgroundColor="{AppThemeBinding Dark={StaticResource BackgroundDark},
                                            Light={StaticResource BackgroundLight}}">
    <!--
        The overall app visual hierarchy is defined here, along with navigation.
        Ensure atleast a Flyout item or a TabBar is defined for Shell to work
    -->
    <Shell.Resources>
        <!--#region Icons-->
        <!-- Home -->
        <FontImageSource
            x:Key="HomeIconLight"
            FontFamily="FAS"
            Glyph="{x:Static fas:IconFont.House}"
            Color="{StaticResource TextLight}" />

        <FontImageSource
            x:Key="HomeIconDark"
            FontFamily="FAS"
            Glyph="{x:Static fas:IconFont.House}"
            Color="{StaticResource TextDark}" />

        <!-- Search -->
        <FontImageSource
            x:Key="SearchIconLight"
            FontFamily="FAS"
            Glyph="{x:Static fas:IconFont.MagnifyingGlass}"
            Color="{StaticResource TextLight}" />

        <FontImageSource
            x:Key="SearchIconDark"
            FontFamily="FAS"
            Glyph="{x:Static fas:IconFont.MagnifyingGlass}"
            Color="{StaticResource TextDark}" />

        <!-- Settings -->
        <FontImageSource
            x:Key="SettingsIconLight"
            FontFamily="FAS"
            Glyph="{x:Static fas:IconFont.Gear}"
            Color="{StaticResource TextLight}" />

        <FontImageSource
            x:Key="SettingsIconDark"
            FontFamily="FAS"
            Glyph="{x:Static fas:IconFont.Gear}"
            Color="{StaticResource TextDark}" />

        <!-- About -->
        <FontImageSource
            x:Key="AboutIconLight"
            FontFamily="FAS"
            Glyph="{x:Static fas:IconFont.CircleInfo}"
            Color="{StaticResource TextLight}" />

        <FontImageSource
            x:Key="AboutIconDark"
            FontFamily="FAS"
            Glyph="{x:Static fas:IconFont.CircleInfo}"
            Color="{StaticResource TextDark}" />

        <!-- Logout -->
        <FontImageSource
            x:Key="LogoutIconLight"
            FontFamily="FAS"
            Glyph="{x:Static fas:IconFont.RightFromBracket}"
            Color="{StaticResource TextLight}" />

        <FontImageSource
            x:Key="LogoutIconDark"
            FontFamily="FAS"
            Glyph="{x:Static fas:IconFont.RightFromBracket}"
            Color="{StaticResource TextDark}" />
        <!--#endregion-->
    </Shell.Resources>
    <!--
        When the Flyout is visible this defines the content to display in the flyout.
        FlyoutDisplayOptions="AsMultipleItems" will create a separate flyout item for each child element
    -->

    <FlyoutItem Title="Home" Icon="{AppThemeBinding Dark={StaticResource HomeIconDark}, Light={StaticResource HomeIconLight}}">
        <ShellContent ContentTemplate="{DataTemplate local:MainPage}" Route="home" />
    </FlyoutItem>
    <FlyoutItem Title="Search" Icon="{AppThemeBinding Dark={StaticResource SearchIconDark}, Light={StaticResource SearchIconLight}}">
        <ShellContent ContentTemplate="{DataTemplate local:SearchPage}" Route="search" />
    </FlyoutItem>
    <FlyoutItem Title="Settings" Icon="{AppThemeBinding Dark={StaticResource SettingsIconDark}, Light={StaticResource SettingsIconLight}}">
        <ShellContent ContentTemplate="{DataTemplate local:SettingsPage}" Route="settings" />
    </FlyoutItem>

    <!--
        When the Flyout is visible this will be a menu item you can tie a click behavior to
    -->

    <MenuItem
        Clicked="OnLogoutClicked"
        IconImageSource="{AppThemeBinding Dark={StaticResource LogoutIconDark},
                                          Light={StaticResource LogoutIconLight}}"
        Text="Logout" />

    <!--
        TabBar lets you define content that won't show up in a Flyout menu. When this content is active
        the flyout menu won't be available. This is useful for creating areas of the application where
        you don't want users to be able to navigate away from. If you would like to navigate to this
        content you can do so by calling
        await Shell.Current.GoToAsync("//login");
    -->

    <TabBar>
        <ShellContent ContentTemplate="{DataTemplate local:LoginPage}" Route="login" />
    </TabBar>

    <!-- Optional Templates
    // These may be provided inline as below or as separate classes.

    // This header appears at the top of the Flyout
    <Shell.FlyoutHeaderTemplate>
        <DataTemplate>
            <Grid>ContentHere</Grid>
        </DataTemplate>
    </Shell.FlyoutHeaderTemplate>

    // ItemTemplate is for ShellItems as displayed in a Flyout
    <Shell.ItemTemplate>
        <DataTemplate>
            <ContentView>
                Bindable Properties: Title, Icon
            </ContentView>
        </DataTemplate>
    </Shell.ItemTemplate>

    // MenuItemTemplate is for MenuItems as displayed in a Flyout
    <Shell.MenuItemTemplate>
        <DataTemplate>
            <ContentView>
                Bindable Properties: Text, Icon
            </ContentView>
        </DataTemplate>
    </Shell.MenuItemTemplate>

    // This footer appears at the bottom of the Flyout
    <Shell.FlyoutFooterTemplate>
        <DataTemplate>
            <Grid>ContentHere</Grid>
        </DataTemplate>
    </Shell.FlyoutFooterTemplate>
    -->
</Shell>